/* 
    자바스크립트 연산자
1) 산술연산자 : + - / %*  **(거듭제곱 연산자)
2) 증감연산자 : ++ -- 익숙하다...
3) 비교연산자 : == != >=  <=  >  <  (===):일치  (!==) : 일치하지않음
4) 논리연산자 : && || !(단항연산자)
            (short circuit)=> && , ||
5) 삼항연산자 : 조건연산자 (조건식) ?  true : false 
                        => 참 거짓 위치에 실행문이 들어감 이 점은 자바와 다른점이다
6) typeof   : 단항연산자 , 오른쪽의 변수가 어떤타입인지 출력
7) 비트연산자 : >> <<  ~(1의 보수 연산자)
8) 대입연산자 : LV = RV ( LV는 변수만 가능)
9) 복합대입연산자 : += -= /= *= ....
<새로운 내용>
10) 전개연산자(SPREAD OPERATOR)
    - 배열 , 객체에 포함된 값들을 펼치는 연산자
    - 함수의 파라미터에 사용
    -대입연산자에서 사용
        변수 , 변수 = ...배열

*/
let a = 3;
console.log(`${a}의 세제곱 = ${a ** 3}`)

let x = '3';
console.log(`a와 x는 같냐? : ${a == x}`) // 문자열을 파싱(구문분석)했을 때 값이 같으면 같다고 반환함
console.log(`a와 x는 같냐? : ${(a === x)}`) // 완전히 일치하지는 않음 타입도 고려한다

let b = 10;
console.log(`b는 0~50사이의 값인가? : ${b >= 0 && b <= 50}`)
console.log(`b는 0~50사이의 값인가? : ${0 <= b <= 50}`) // 자바에서는 오류 , 파이썬과 자바스크립트는 오류 아님 , 하지만 이 방식을 권장하진 않는다
console.log(`b는 50~ 0사이의 값인가? : ${50 < b < 0}`) // 이와같이 잘못된 결과값을 가져올수 있어서 지양해야한다

/*

short sircuit(단축평가)
- 왼쪽연산의 결과에 따라서 오른쪽연산의 실행여부를 결정하는 기능
- 논리연산자(&& || )
&&  둘중 하나만 false면 결과도 false이다
(T && ? => ?) 전체연산의 결과가 미지수이므로 두번째 연산을 실행함
F && ? => F  이 경우 전체연산 결과를 알아서 뒤에거를 실행하지 않는다

|| 둘중 하나만 true,면 전체결과도 true이다
(T && ? => ?) 전체연산의 결과가 true이므로 두번째 연산을 실행하지 않음
F && ? => F  이 경우 전체연산 결과를 몰라서 뒤에거를 실행한다

*/
let c = 1;
c > 1 || console.log("실행되니"); // F || ? (실행됨)
c == 1 || console.log("실행되니"); // T || ? (실행안됨)

// ================삼항연산자 실습

let d = 5;
let e = 3;
d > e ? console.log(`${d}가${e}보다 크다`) : console.log(`${d}가${e}보다 작다`);

// =================================== 전개연산자(spread 연산자)
let obj = { name: '홍길동' };
let obj2 = { name: '임껵정' };
let obj31 = { ...obj, ...obj2 }; // 결과 : {name :'임꺽정'}
// console.log(obj);
console.log(obj31);

let obj3 = { addr: '제주도 제주시' };
let obj32 = { ...obj2, ...obj3 }; // 결과 : {name :'임꺽정'}

console.log(obj32);

// let obj33 = [...obj2, ...obj3]; //  syntax오류는 아니지만  obj2 obj3가 iterable이 아니기 때문에 실행시 오류
// console.log(obj33);

// ============================================ 배열에 전개연산자 사용
let ary1 = [1, 3, 5, 7];
let ary2 = [2, 3, 5, 8];

let ary4 = [...ary1, ...ary2];

console.log(ary4);

let ary42 = { ...ary1, ...ary2 }; // 1,3,5,7,2,4,5,8
console.log(ary42); // 방번호가 키역할 {0:1,1:3,2:5,3:7}  {0:2,1:4,2:5,3:8} => 방번호끼리 매칭되지만
// 방버ㄴ호가 같은 데이터가 있으므로 object로 만들면 뒤쪽 데이터만 살아남고
// 앞의데이터는 날아감










